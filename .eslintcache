[{"/Users/sylviachadha/WebstormProjects/playground/src/index.js":"1","/Users/sylviachadha/WebstormProjects/playground/src/reportWebVitals.js":"2","/Users/sylviachadha/WebstormProjects/playground/src/App.js":"3","/Users/sylviachadha/WebstormProjects/playground/src/pages/dashboard.js":"4","/Users/sylviachadha/WebstormProjects/playground/src/components/dateselection.js":"5","/Users/sylviachadha/WebstormProjects/playground/src/components/header.js":"6"},{"size":500,"mtime":1611997449896,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611997449898,"results":"9","hashOfConfig":"8"},{"size":794,"mtime":1611999183407,"results":"10","hashOfConfig":"8"},{"size":4828,"mtime":1612012827729,"results":"11","hashOfConfig":"8"},{"size":1790,"mtime":1612004372132,"results":"12","hashOfConfig":"8"},{"size":1035,"mtime":1611998989971,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wib6t6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/sylviachadha/WebstormProjects/playground/src/index.js",[],["29","30"],"/Users/sylviachadha/WebstormProjects/playground/src/reportWebVitals.js",[],"/Users/sylviachadha/WebstormProjects/playground/src/App.js",[],"/Users/sylviachadha/WebstormProjects/playground/src/pages/dashboard.js",["31","32","33"],"import React, {useState,useEffect} from 'react';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Grid} from \"@material-ui/core\";\nimport DateSelection from \"/Users/sylviachadha/WebstormProjects/playground/src/components/dateselection\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport {Typography} from \"@material-ui/core\";\nimport axios from \"axios\";   // HTTP Client\n\n\nimport Plot from \"react-plotly.js\";\n\n\nconst useStyles = makeStyles(theme => ({\n    mainContainer1: {\n        padding: 0,\n        margin: 0\n    },\n    mainContainer2: {\n        padding: 0,\n        margin: 0\n    },\n    Typo: {\n        marginTop: '1.5rem',\n        marginLeft: '2rem',\n        marginRight: '3rem',\n    },\n    DateGrid: {\n       backgroundColor: '#e8eae6'\n    },\n}))\n\nexport default function Dashboard() {\n\n    const [recentData,setRecentData] = useState([])\n    const [ltData,setLt] = useState([])\n\n    useEffect(async () => {\n        const resp = await axios.get('http://localhost:8080/python-hiv-cases-by-age');\n        const responseObjParent = await JSON.parse(resp.data)\n        const  respObj = responseObjParent.result;\n        console.log(respObj)\n\n        // const respObj =  await JSON.parse(resp.data.result)\n        // setRecentData(respObj.recent)\n        // setLt(respObj.longTerm)\n    }, []);\n\n    const classes = useStyles();\n\n    const Gauge1data = [\n        {\n            domain: {x: [0, 1], y: [0, 1]},\n            value: 90.1, number: {suffix: \"%\"},\n            title: {text: \"Tested by RTRI\"},\n            type: \"indicator\",\n            mode: \"gauge+number\",\n            delta: {reference: 100},\n            gauge: {axis: {range: [null, 100]}}\n        }\n    ];\n\n    const ageGroup = ['15-25', '25-35', '35-45', '45-55'];\n\n\n\n\n    const recent = {\n        x: ageGroup,\n        y: recentData,\n        type: 'bar',\n        text: recentData.map(String),\n        textposition: 'auto',\n        hoverinfo: 'none',\n        name: \"LT\",\n        opacity: 0.5,\n        marker: {\n            color: 'rgb(158,202,225)',\n            line: {\n                color: 'rgb(8,48,107)',\n                width: 1.5\n            }\n        }\n    };\n\n    const longTerm = {\n        x: ageGroup,\n        y: ltData,\n        type: 'bar',\n        text: ltData.map(String),\n        textposition: 'auto',\n        hoverinfo: 'none',\n        name: \"Recent\",\n        marker: {\n            color: 'rgba(58,200,225,.5)',\n            line: {\n                color: 'rgb(8,48,107)',\n                width: 1.5\n            }\n        }\n    };\n\n    const Bar2Data = [recent, longTerm];\n\n    const Bar2Layout = {\n        width: 430,\n        height: 350,\n        title: \"Age Group Impacted\",\n        xaxis: {title: 'Age group'},\n        yaxis: {title: 'No of HIV Cases'}\n    };\n\n    return (\n        <Grid container className={classes.mainContainer1} direction={\"column\"}>\n            <Grid item>\n                <Grid container className={classes.DateGrid}>\n                    <Grid item >\n                        <Typography className={classes.Typo}variant=\"h5\">\n                            Select Date\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <DateSelection></DateSelection>\n                    </Grid>\n                </Grid>\n            </Grid>\n            < Grid item>\n                <Grid container>\n                    <Grid item>\n                        <Card className={classes.root} variant=\"outlined\">\n                            <CardContent>\n                                <Plot\n                                    data={Gauge1data}\n                                    layout={{\n                                        width: 300, height: 180, margin: {t: 0, b: 0},\n                                        paper_bgcolor: \"#eaeaea\"\n                                    }}\n\n                                    // To disable trace\n                                    config={{displayModeBar: false, staticPlot: false}}\n                                />\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                    <Grid item>\n                        <Card className={classes.root} variant=\"outlined\">\n                            <CardContent>\n                                <Plot\n                                    data={Bar2Data}\n                                    layout={Bar2Layout}\n\n                                    // To disable trace\n                                    config={{displayModeBar: false, staticPlot: false}}\n                                />\n                            </CardContent>\n                        </Card>\n                    </Grid>\n                </Grid>\n\n            </Grid>\n        </Grid>\n    );\n}\n","/Users/sylviachadha/WebstormProjects/playground/src/components/dateselection.js",[],["34","35"],"/Users/sylviachadha/WebstormProjects/playground/src/components/header.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":35,"column":23,"nodeType":"42","messageId":"43","endLine":35,"endColumn":36},{"ruleId":"40","severity":1,"message":"44","line":36,"column":19,"nodeType":"42","messageId":"43","endLine":36,"endColumn":24},{"ruleId":"45","severity":1,"message":"46","line":38,"column":15,"nodeType":"47","endLine":47,"endColumn":6},{"ruleId":"36","replacedBy":"48"},{"ruleId":"38","replacedBy":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'setRecentData' is assigned a value but never used.","Identifier","unusedVar","'setLt' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["50"],["51"],"no-global-assign","no-unsafe-negation"]